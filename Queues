#include<stdio.h>

#include<stdlib.h>

#define size 5

struct CircularQueue

{

    int q[size];

    int front,rear;

};

typedef struct CircularQueue CQ;

int count=0;



void insert(CQ *cq,int item){

if(cq->front == 0 && cq->rear == size-1 || cq->front > cq->rear){

    printf("Queue Overflow\n");

    return;

}

if(cq->rear==size-1 && cq->front !=0){

    cq->rear = 0;

}else{

    cq->rear = cq->rear+1;

    cq->q[cq->rear] = item;

}

    if(cq->front==-1){

        cq->front=0;

    }

    count++;

}



void delete(CQ *cq){

    int item;

    if(cq->front==-1){

        printf("Queue is empty\n");

        return;

    }

    item = cq->q[cq->front];

    if(cq->front==cq->rear){

        cq->front=cq->rear=-1;

    }else if(cq->front==size-1){

        cq->front=0;

    }else{

        cq->front=cq->front+1;

    }

    printf("Deleted element is: %d",item);

    count--;

}



void display(CQ *cq){

    if(cq->front==-1){

        printf("Queue is empty\n");

        return;

    }

printf("Queue Contents are: ");

int j = cq->front;

for(int i=1;i<=count;i++){

printf("Q[%d]=%d\t",j,cq->q[j]);

j=(j+1)%size;

}

printf("\n");

printf("Front = %d, Rear = %d\n",cq->front,cq->rear);

}



int main()

{

     CQ cq;

    cq.front = -1;

    cq.rear = -1;



    int choice,ele;

    do {

        printf("\nQueue Operations:\n");

        printf("1. Insert\n");

        printf("2. Delete\n");

        printf("3. Display Queue\n");

        printf("4. Exit\n");

        printf("Enter your choice: ");

        scanf("%d", &choice);



        switch (choice) {

            case 1:printf("Enter the element: ");

                   scanf("%d",&ele);

                   insert(&cq,ele);

                   break;

            case 2:

                delete(&cq);

                break;

            case 3:

                display(&cq);

                break;

            case 4:

                printf("Exiting...\n");

                exit(0);

            default:

                printf("Invalid choice! Please try again.\n");

        }

    } while (choice != 6);



    return 0;

}
